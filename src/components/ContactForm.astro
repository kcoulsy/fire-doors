---
interface Props {
  title?: string;
  subtitle?: string;
  showPhone?: boolean;
  className?: string;
  location?: string;
  serviceType?: string;
  uniqueId?: string;
}

const {
  title = "Get Your Fire Door Quote",
  subtitle = "Ready to ensure your fire safety compliance? Get in touch for a professional inspection and quote.",
  showPhone = true,
  className = "",
  location,
  serviceType,
  uniqueId = "",
} = Astro.props;

// Generate unique IDs for form elements
const formId = uniqueId
  ? `modern-contact-form-${uniqueId}`
  : "modern-contact-form";
const submitButtonId = uniqueId ? `submit-button-${uniqueId}` : "submit-button";
const sendIconId = uniqueId ? `send-icon-${uniqueId}` : "send-icon";
const buttonTextId = uniqueId ? `button-text-${uniqueId}` : "button-text";
const loadingSpinnerId = uniqueId
  ? `loading-spinner-${uniqueId}`
  : "loading-spinner";
const successMessageId = uniqueId
  ? `success-message-${uniqueId}`
  : "success-message";
const errorMessageId = uniqueId ? `error-message-${uniqueId}` : "error-message";
---

<div
  class={`bg-white rounded-xl shadow-lg border border-gray-200 p-6 ${className}`}
>
  <div class="text-center mb-6">
    <h2 class="text-2xl font-bold text-gray-900 mb-2">{title}</h2>
    <p class="text-gray-600">{subtitle}</p>
  </div>

  <form
    id={formId}
    name="contact"
    method="post"
    data-netlify="true"
    netlify-honeypot="bot-field"
    class="space-y-4"
  >
    <!-- Hidden form name for Netlify -->
    <input type="hidden" name="form-name" value="contact" />

    <!-- Honeypot field -->
    <div class="hidden">
      <input name="bot-field" />
    </div>

    <!-- Name Field -->
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
        Full Name <span class="text-red-500">*</span>
      </label>
      <input
        type="text"
        id="name"
        name="name"
        required
        placeholder="Enter your full name"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-[#1e3a8a] transition-colors"
      />
    </div>

    <!-- Email Field -->
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
        Email Address <span class="text-red-500">*</span>
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        placeholder="Enter your email address"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-[#1e3a8a] transition-colors"
      />
    </div>

    <!-- Phone Field -->
    {
      showPhone && (
        <div>
          <label
            for="phone"
            class="block text-sm font-medium text-gray-700 mb-1"
          >
            Phone Number <span class="text-red-500">*</span>
          </label>
          <input
            type="tel"
            id="phone"
            name="phone"
            required
            placeholder="Enter your phone number"
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-[#1e3a8a] transition-colors"
          />
        </div>
      )
    }

    <!-- Message Field -->
    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">
        Project Details <span class="text-red-500">*</span>
      </label>
      <textarea
        id="message"
        name="message"
        rows="4"
        required
        placeholder="Tell us about your fire door requirements, building type, number of doors, and any specific compliance needs..."
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#1e3a8a] focus:border-[#1e3a8a] transition-colors resize-vertical"
      ></textarea>
    </div>

    <!-- Submit Button -->
    <button
      type="submit"
      id={submitButtonId}
      class="w-full bg-[#1e2a38] hover:bg-[#1e3a8a] text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-[#1e3a8a] focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed hover:scale-[1.02] hover:shadow-lg active:scale-[0.98] transform"
    >
      <div class="flex items-center justify-center">
        <svg
          id={sendIconId}
          class="w-5 h-5 mr-2 transition-transform duration-300"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
        </svg>
        <span id={buttonTextId}>Send Message</span>
        <div
          id={loadingSpinnerId}
          class="hidden w-5 h-5 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin"
        >
        </div>
      </div>
    </button>
  </form>

  <!-- Success Message (shown by Netlify after successful submission) -->
  <div
    id={successMessageId}
    class="hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-lg"
  >
    <div class="flex items-center">
      <svg
        class="w-5 h-5 text-green-500 mr-2"
        fill="currentColor"
        viewBox="0 0 20 20"
      >
        <path
          fill-rule="evenodd"
          d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
          clip-rule="evenodd"></path>
      </svg>
      <span class="text-green-800 font-medium"
        >Message sent successfully! We'll get back to you soon.</span
      >
    </div>
  </div>

  <!-- Error Message (shown by Netlify if there's an error) -->
  <div
    id={errorMessageId}
    class="hidden mt-4 p-4 bg-red-50 border border-red-200 rounded-lg"
  >
    <div class="flex items-center">
      <svg
        class="w-5 h-5 text-red-500 mr-2"
        fill="currentColor"
        viewBox="0 0 20 20"
      >
        <path
          fill-rule="evenodd"
          d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
          clip-rule="evenodd"></path>
      </svg>
      <span class="text-red-800 font-medium"
        >Something went wrong. Please try again or call us directly.</span
      >
    </div>
  </div>

  <!-- Contact Info -->
  <div class="mt-6 pt-6 border-t border-gray-200">
    <div class="text-center">
      <p class="text-sm text-gray-600 mb-2">Prefer to call?</p>
      <a
        href="tel:07544 030486"
        class="text-[#1e2a38] hover:text-[#1e3a8a] font-semibold text-lg transition-colors duration-200"
      >
        Robert: 07544 030486
      </a>
    </div>
  </div>
</div>

<script
  define:vars={{
    location,
    serviceType,
    formId,
    submitButtonId,
    sendIconId,
    buttonTextId,
    loadingSpinnerId,
    successMessageId,
    errorMessageId,
  }}
>
  // Enhanced contact form with micro-interactions
  document.addEventListener("DOMContentLoaded", function () {
    const urlParams = new URLSearchParams(window.location.search);
    const successMessage = document.getElementById(successMessageId);
    const errorMessage = document.getElementById(errorMessageId);
    const submitButton = document.getElementById(submitButtonId);
    const sendIcon = document.getElementById(sendIconId);
    const buttonText = document.getElementById(buttonTextId);
    const loadingSpinner = document.getElementById(loadingSpinnerId);

    // Button micro-interactions
    if (submitButton) {
      // Hover effect - icon moves slightly
      submitButton.addEventListener("mouseenter", function () {
        if (sendIcon) {
          sendIcon.style.transform = "translateX(2px) rotate(12deg)";
        }
      });

      submitButton.addEventListener("mouseleave", function () {
        if (sendIcon) {
          sendIcon.style.transform = "translateX(0) rotate(0deg)";
        }
      });

      // Click effect - button scales down
      submitButton.addEventListener("mousedown", function () {
        this.style.transform = "scale(0.98)";
      });

      submitButton.addEventListener("mouseup", function () {
        this.style.transform = "scale(1.02)";
      });

      // Form submission loading state
      const form = document.getElementById(formId);
      if (form) {
        form.addEventListener("submit", function (e) {
          // Show loading state
          if (submitButton && sendIcon && buttonText && loadingSpinner) {
            submitButton.disabled = true;
            sendIcon.classList.add("hidden");
            buttonText.textContent = "Sending...";
            loadingSpinner.classList.remove("hidden");
          }
        });
      }
    }

    // Success/Error message handling
    if (urlParams.get("success") === "true" && successMessage) {
      successMessage.classList.remove("hidden");
      successMessage.style.animation = "slideInUp 0.5s ease-out";
      // Auto-hide after 8 seconds
      setTimeout(() => {
        successMessage.style.animation = "slideOutDown 0.5s ease-out";
        setTimeout(() => {
          successMessage.classList.add("hidden");
        }, 500);
      }, 8000);
    }

    if (urlParams.get("error") === "true" && errorMessage) {
      errorMessage.classList.remove("hidden");
      errorMessage.style.animation = "slideInUp 0.5s ease-out";
      // Auto-hide after 8 seconds
      setTimeout(() => {
        errorMessage.style.animation = "slideOutDown 0.5s ease-out";
        setTimeout(() => {
          errorMessage.classList.add("hidden");
        }, 500);
      }, 8000);
    }

    // Add location information to form submission
    const form = document.getElementById(formId);
    const messageField = document.getElementById("message");

    if (form && messageField && location && serviceType) {
      form.addEventListener("submit", function (e) {
        const currentMessage = messageField.value || "";
        const locationInfo = `\n\n---\nInquiry from: ${location} (${serviceType})`;
        messageField.value = currentMessage + locationInfo;
      });
    }
  });
</script>

<style>
  /* Button micro-interaction animations */
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideOutDown {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(20px);
    }
  }

  /* Enhanced button hover effects */
  button[type="submit"]:hover {
    box-shadow: 0 10px 25px rgba(30, 42, 56, 0.3);
  }

  button[type="submit"]:active {
    transform: scale(0.98);
  }

  /* Loading spinner animation */
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
</style>
